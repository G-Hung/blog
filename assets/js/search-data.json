{
  
    
        "post0": {
            "title": "Start to appreciate 'boring' parts in life",
            "content": "Start to appreciate ‘boring’ parts of life . For the last two years [since COVID], I have started to appreciate the “boring” parts in life, something I used to think are old school and not cool. . Work . In work, I have started to vote for a simple yet not naive approach, “simple” means easy to deliver solid things and no gotcha; “yet not naive” means there are enough spaces for the extension, just not now. In order to keep lazy, I have started to plan, draw and write down some key things if possible before I get started, I have started to execute slower before the math works out . To the younger me, this would sound impossible, I was very proud of myself with a good memory [even without notes] and the most fanciest ways to accomplish something without steps. I remember back to my secondary school time, I was quite good at math and always doing all the steps and calculations in my mind, the papers only contained a few unreadable steps and the final answers. If I needed to work with the younger me on some projects now, I would say “fk you, don’t skip any steps, I have no interest in reading your mind, I don’t want to guess”! . Daily life . In daily life, I have started to work out regularly, eat breakfast and lately learn something daily. These are quite surprising changes to me, I recall I was one of the weakest [in terms of physical strength] people in secondary school and now I push the barbell and lift the dumbbell a few times per week in my room. I make my [the very same] breakfast after I wake up whereas I only had breakfast during the weekend because I need to have breakfast with my family [HK Dimsum!]. I now open the site to learn something after dinner, whereas I found some mobile games to spend my nights. . Social life . In social life, I kept on thinking about the cool events to go with my friends, but now I really enjoy less-is-more ._. Just coming out, having a coffee/dinner and chatting are enough to make me happy. . . Not sure whether it means I am “older” now or COVID transforms me into this way, but I quite enjoy the current simple style if I could meet my friends even easier. The feeling of appreciating the “boring” parts recalls me a song 苦瓜 by Eason Chan, sorry for those who can’t read chinese .",
            "url": "https://g-hung.github.io/blog/career/2021/11/13/start-to-appreciate-boring-parts.html",
            "relUrl": "/career/2021/11/13/start-to-appreciate-boring-parts.html",
            "date": " • Nov 13, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "How to choose jobs in the DS world",
            "content": "How to choose jobs in the DS world? . This is what I have struggled in my mind over the years, what is a good DS job……. To solve this problem, I have created the checklist/questions which I hope the previous me could read before making the career decision. I won’t talk about compensation / tech details / interviews, that’s another story . You are not always in the position to choose (such as finding jobs during COVID-19) but you should seriously evaluate your options if you can . Job nature . There are thousands of jobs sharing the same title, eg: data scientist, data engineer, ml engineer. But they could be totally different from company to company, be aware! . The first thing I will look into is the skill requirements to identify the job nature . If it is analytics, expect tons of SQL, dashboards, presentations, product analytics, experimental designs. You probably need to enjoy talking to people, finding insights, guiding the business, which means you need to be a domain expert in that business. In short, I think it is more like a business/PM/consultant type of roles, but from data perspective . If it is engineering, be alert if the job responsibilities are vague, don’t make assumptions, let me repeat: don’t make assumptions! For example, the people who share the data engineer title may do completely different things. Some are developing ETL pipelines; some are working on instrumentation; some are building the new data / ML infrastructure. You should think clearly whether that fits your career plan! . Also, another common “trap” is internal transfer, you want to get into the company first and switch to the roles you want, while I don’t deny the possibility, don’t be over-optimistic in your calculation, hope is not a strategy . If it is modelling, I will consider two things, one is the value of the models, another is the team maturity. For example, developing a model for Dogecoin price prediction sounds great but the outcome is probably not promising. Team maturity is another consideration, be aware if the team is too green or even worse, you are the first member. They will sell like every startup does: you will have enough space to innovate. There are successful stories but think about survival bias. If you are super capable/team lead level, it may be worth trying; if not, then……… . Business/product model . Personally I think this is fundamental factor to determine your scope and potential achievements in the organisation, and financial uplift, I will ask myself the following questions: . How do you justify your (or your team) pay check in that business/product? How large is the potential uplift? This question requires you to think about how the company makes for living, and what area you can contribute. . For example, in the traditional industries such as merchandising, they probably don’t need advanced ML yet but they need to digitalise their business first. So even if you are a genius in ML, there are no such demands, and your deliverables will likely be ppt or fitting some models on some data in a Jupyter notebook. You will likely try to establish some KPIs or standardise the business workflow and get rejections from business experts. . The trap here is these companies usually say they are willing to change/digitalise themselves, but that usually won’t happen because that doesn’t fit their previous success path, your role is in fact threatening the interests of the original core team if you can’t show values quickly. Don’t recommend unless you are confident that you can be an asset rather than a liability. . | What is the “resource complexity” to scale? O(1)? O(n)? O(n**k)? Software industry is different from others because it is much easier to scale, or in economics terms, marginal cost of software approaches zero. But not every software has such a property, especially B2B solutions. In recent years, there are tons of “AI companies” developing their solutions in different verticals and plan to sell them. . The happy flow is they will develop one algorithm/system and run in different customer systems, since the companies in the vertial are mostly giant companies [eg: banking, telecom, retailers, airlines], they can afford a big bill if the solution is nice! But the unideal parts are: selling solutions to business usually require custom integration, that hurts the scalability and increases the marginal cost, A LOT, especially if you are using AI [those deep learning things]. Deep learning models are still blackbox, there are too many edge cases if the business requires more than the simple &amp; straightforward use cases. . These companies can definitely make money if the margin is big but nature will become more like a service or integration company, aka human intensive. So from an employee perspective, it implies you will need to do one project after another, hence operational tasks / projects may take up significant amounts of your time and you have less time for R&amp;D / innovative things if those are what you want. . To compare the difference, imagine SaaS companies like Confluence [The company that makes Jira], the marginal cost to serve one more user is close to zero and even if they don’t develop any feature for a whole quarter, it won’t affect their growth in the short run. These companies hence usually have more time &amp; resources to experiment the new things because the business outputs could be detached from employee’s work hours and client’s business logic . | business/product model also affects the operations, A LOT! We are doing DS so where is the data? SaaS / B2C products don’t feel such pains because users will likely use their developed applications, and engineers can implement tracking or log the events in servers to collect the data [there are also some headaches but everything is under your control, at least before Apple’s App Tracking Transparency]. . But imagine if your clients are government, banks, airlines, retailers, and you have a ML solution for parts of their processes. Then you need to ask them for the data, you need to understand their schema &amp; business logic, handling the dirty data, and come up with tons of workarounds to run your models. . That isn’t fun because your time is tied to the outcomes &amp; your work is constrained by others. Never imagine those companies will change their process because of your product, never assume their digitalisation level will boost suddenly to meet modern software requirements. You will probably be woken by PagerDuty and live with tech debts until the end of your tenure there instead . | Nice article from a16z to discuss AI companies . Team . Your supervisor and team contribute a huge chunk of your job satisfaction, they can determine whether it is an amazing or nightmare experience. But this part is quite general for every job, some key signals I recommend you to look for are: . Growth mindset: Do they adapt to a growth mindset? Do they encourage people to grow but not box them like a robot? Do they micromanage? How do they make the decisions? Are they humble? Get these information during interviews . | Atmosphere: Are they a happy team? Are they humour？Are they willing to share the insights and knowledges? This will signal whether people are psychologically safe, if the answer is no, you better understand why and whether you can accept that. Mental health and growth are even more important than your compensation after a certain threshold. A mismatched atmosphere will make you become a philosopher, stay away from the toxic culture, it makes you negative, short-term focus, and anxious! . | Experience: Are the team experienced? If not, you may have a hard time getting up to speed. BTW, companies usually frame this shortcoming as challenge / opportunity, calculate the odds yourself . | Company . Do due diligence carefully Go to Glassdoor/Blind, check the negative reviews because they are mostly true. My theory is 5 star reviews could be neglected because that fits the company interest but you should read and evaluate every word in 1 star reviews . | Check the background of management Are they experienced? Do they know what they are doing? Do you have networks that work with/for them? Give them a call! These are important because inevitably there are up and down in business, these factors will take effect at that critical moment . | Check company retention Are there many people leaving recently? That maybe a signal . | Check funding status if you are applying for a startup . | Trust your guts idk, but whenever I feel something weird / doesn’t make sense, they are usually true unfortunately. Be rational, don’t be over optimistic. Remember they are trying to sell you the company, which means they are like a sales team and show only beautiful pictures in your mind. Be rational! . | Conclusions . Unless you are super lucky and get your dream job, your decision should be tradeoff b/w various factors we discussed above . Some people enjoy coding while some people enjoy talking to people | Some people enjoy quiet culture while some people enjoy happy &amp; open culture | Some people prefer stability while some people prefer growth (risk) | Some people prefer B2B because of easier monetization while some people prefer B2C because of possibility of rapid scaling | . As long as you have evaluated the options carefully and understood the potential good and bad, the rest is your choice! . Recommended reading: . reading note of Effective Engineer .",
            "url": "https://g-hung.github.io/blog/career/2021/07/07/how-to-choose-ds-job.html",
            "relUrl": "/career/2021/07/07/how-to-choose-ds-job.html",
            "date": " • Jul 7, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Revisit some basic theorems in probability",
            "content": "For a long time, I confused their relationship . When I had my statistics class, I always confused these three in my mind: . Chebyshev’s inequality [I don’t know how to pronounce :- , usually just call it CS inequality]: met it few times in my life but didn’t leave me a big impression. . Law of large number &amp; Central Limit Theorem: always use them interchangeably, but deep in my heart I remember they are different . Recently in a conversation with my friend, we talked about some hypothesis testing things [t-test], we discussed the assumptions of t-test like this: . A: yeah, you see, even the distribution shapes of these two population are different By central limit theorem, the means will follow normal distribution regardless of the shape We can still use it even the distributions are not normal B: Sure, law of large number right? As we have more samples they will converage and hence t-test is valid even the distributions are not normal A: oooo seemingly right..... . Obviously I am A, but I was hestiate for few seconds because I forgot what is law of large number and how is it related to CLT! I remember they have some subtle differences. Therefore, I revisit the materials in probability course recently to answer the difference myself, and what the hell is Chebyshev’s inequality . Chebyshev’s inequality . Recall the basic numbers for distribution, expected value and variance, one describes the central tendency, another describes the spreadness of the distribution . If the variance is small, the distribution is not that widely spread, it is less likely to get the outcome far away from the mean . In mathematical terms, it is less likely to see abs(X - u) &gt;= certain number, hence Pr[ abs(X - u) &gt;= certain number ] should be small. . When that certain number becomes even bigger, that probability should become even smaller [less likely]. . Chebyshev’s inequality basically states this relationship using expected value and variance: . Pr[ abs(X - E(X)) &gt;= a ] &lt;= Var(X) / a^2 for a &gt; 0 | . The importance of this equation is that we can calculate the sample size after we specify what level of confidence and bound we want . It is also beautiful! Link expected value and variance together in one inequality regardless of distributions . Law of large number . Recall the fact that variance will decrease when n increases and take a look on Chebyshev’s inequality again! . Pr( abs(X - u) &gt;= a) &lt;= Var(X) / a^2 for a &gt; 0 | Var(X) -&gt; 0 as n increases | . Therefore, Pr[ abs(X - E(X)) &gt;= a ] -&gt; 0 for a &gt; 0 Therefore, Pr[ abs(mean(X) - E(X) &gt;= a ] -&gt; 0 . Law of large number basically tells us the sample average will converge to expected value when n increase, basis of statistics and simulation . Central Limit Theorem . CLT tells us average of n observations of ANY r.v will follow normal, ALL distributions, no matter how complex it is as long as mean and variance are finite . Conclusion . Now rethink what each of them is doing . CS inequality tells us that the difference b/w sample and expected value is bounded . LLN tells us the difference b/w sample mean and expected value is not only bounded, but converages to zero when n increases . CLT tells us the sample mean not only converages, but the distribution of sample mean converages to normal distribution when n increases regardless of underlying distributions . CLT makes the biggest claim and hence is also the most famous, valuable and backbone of statistics . Recall the t-test conversation . A: yeah, you see, even the distribution shapes of these two population are different By central limit theorem, the means will follow normal distribution regardless of the shape We can still use it even the distributions are not normal B: Sure, law of large number right? As we have more samples they will converage and hence t-test is valid even the distributions are not normal ^^^This statement is not correct^^^ # sample mean does converge to expected value # but nothing to do with converging to normal distribution, that&#39;s the magic of CLT A: oooo seemingly right..... . Disclaimer . Some of them are not precise &amp; complete description, eg you may rmb weak/strong law of large number, reading a mathematical statistics book maybe more useful. .",
            "url": "https://g-hung.github.io/blog/statistics/2021/05/31/revisit-basic-theorem-in-probability.html",
            "relUrl": "/statistics/2021/05/31/revisit-basic-theorem-in-probability.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "From cURL to Automated Workflow",
            "content": "Medium link . This is an old article I posted in Medium, I may just provide the link without reproducing it here! . When we work in DS field, the most important thing is data. But we don’t want to handle the things manually because it means mistakes and demands people to work like a machine. . This article discusses how to make a pipeline to hold data from ARK fund, load them to Google BigQuery, checking the data quality using dbt, the whole workflow is managed and automated by GitHub Actions! .",
            "url": "https://g-hung.github.io/blog/engineering/workflow/2021/02/23/from-curl-to-workflow.html",
            "relUrl": "/engineering/workflow/2021/02/23/from-curl-to-workflow.html",
            "date": " • Feb 23, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "From Scripts To Prediction API",
            "content": "Medium link . This is an old article I posted in Medium, I may just provide the link without reproducing it here! . After we have the ML/DS scripts, how can others make use of the predictions? Definitely we don’t want to run the scripts ourselves and send it over the email / message. A common approach is to develop the API . This article continues from the last medium post and discusses how to build the prediction API and the importance of unit testing .",
            "url": "https://g-hung.github.io/blog/engineering/workflow/2020/08/16/from-scripts-to-predictionapi.html",
            "relUrl": "/engineering/workflow/2020/08/16/from-scripts-to-predictionapi.html",
            "date": " • Aug 16, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "From Jupyter Notebook To Scripts",
            "content": "Medium link . This is an old article I posted in Medium, I may just provide the link without reproducing it here! . This article records part of my learnings from my practicum at Manifold AI! I remember I was a big fan of Jupyter Notebook and wanted to use it for everything! . My first time to use Jupyter Notebook in work [not exploration / homework] was to try Databricks to handle some data processing works. I was amazed by the notebook style because I am not from CS background and I would love to see what is happening in every step! . But I found that those colleagues with CS background don’t prefer this way, I had no clues why. Slowly, I started to feel inconvenient too when the processing logics are more and more complex…….Well, things are still working……. . Until I worked in Manifold AI and needed to write the whole workflow, I finally found that it is much much easier &amp; more flexible to run the code by a list of commands instead of a long Notebook…… . Plus, I have the habit to write unit tests whenever possible after I experienced how painful it is when you try to refactor any non-trival codebase. . During the painful job searching period in 2020 [wtf graduated during COVID-19], I didn’t have many things to do so I summarized and wrote this up. .",
            "url": "https://g-hung.github.io/blog/engineering/workflow/2020/08/06/from-jupyter-notebook-to-scripts.html",
            "relUrl": "/engineering/workflow/2020/08/06/from-jupyter-notebook-to-scripts.html",
            "date": " • Aug 6, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Start from Hong Kong: 199X - 2019 . Yoooo! I am Geoffrey from Hong Kong, currently in California! I graduated with my BSc in Statistics from CUHK, the place that I am proud of &lt;3. . I worked in various companies in Hong Kong! I am glad to meet a lot of great leaders &amp; colleagues and learn from them. . . Move to SF Bay Area: 2019 - Now . In 2019, I moved to the Bay Area to attend the University of San Francisco’s MSDS. I enjoy the environment [maybe not the downtown :( ] and all the great people I have met in the Bay Area! Sadly, I cannot experience the “normal” social life because of COVID :( . from time to time, I have some random walks around the Bay side, walk, sit and think . MSDS and Manifold: 2019 - 2020 . I am fortunate enough to do my practium at Manifold AI and work on some open-ended research using deep learning with world class tech-leaders and hardcore engineers. This experience also changes my understandings in ML/DS and engineering in general! . . Interests . My interests are DS and engineering in general, I am particularly interested in ML/DS workflow. I honor the Three Virtues of a programmer and love to bring those virtues to ML/DS world! . Outside work and study, I have started to pick up cooking skills since 2020 [because of COVID]. I have also spent some times on Brawl Stars [hit me by #C2QRU8QQ]. Reading is also a big component of my life, I enjoy history and psychology most! I will probably include some books that impact me the most in a section of this site . For this site . I don’t think I will take aggressive approach [aka job searching] for this blog. Afterall I see there are so many blogs without updates for years after the authors found the job LOL I don’t want to be one of them and hope to sustain this blog longer. I will probably treat this as my private space and library to keep track of my thoughts and learnings. . Depending on materials, maybe I will use Chinese 中文 some times .",
          "url": "https://g-hung.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Read/Watch/Learn",
          "content": "Resources: Made with ML . This material is super awesome! Contains all the things I wish to learn connecting ML and engineering! Other than concepts, the example codes are great, no BS, I can just reference, copy, use them right away and it WORKS! . . 机器学习：软件工程方法与实现 . The direct translation is “Machine Learning: software engineering and implementation”. Surprisingly good and practical book that introduces the ML work in reality [including the software engineering side with main focus on non-deep learning areas] and offers the high level picture of different aspects in reality, strongly recommend if you can read Chinese . . Designing Data-Intensive Applications . Maybe one of the best tech books in recent years, must read for serious players in data science / ML engineering, period . . Sapiens: A Brief History of Humankind . I have met many people said they have read this, maybe it is too famous lol I have read it and finished the Coursera course from the same author. . The single view that impacts me most is: humans are living in both subjective and objective world. In fact, money, nation, values etc are all constructed by our minds. They are meaningless if no one believe that . . Resources: Sebastian Raschka . In short, this is the first place I will go if I need to review the topics about ML/DL. I particularly enjoy the clear &amp; easy-to-follow logic. Plus, there are many code examples! . . Resources: Full Stack Deep Learning . Cover almost everything I want to learn about ML workflow, strongly recommend if you need to worry engineering part of the ML as well . . Coursera: 史記 . 「從歷史來看，決定人生成敗的不過就是兩樣東西，第一是運氣，第二是自我要求。什麼是運氣？往大的方面來說，生在什麼時代是運氣，生在什麼國家是運氣，生在什麼家庭也是運氣。往小的說，出門左轉或右轉，接不接一個電話人生可能就不一樣，運氣對每個人就是這麼重要。但是運氣不可測也不能控制，我們所能控制的只有自我要求，如果我們真心想成為什麼樣的人，是真心不是發夢想想，就必須不斷奮鬥努力讓自己具有足夠條件，等待偶然的機會」 . 這段課文感受良多，沒有人會希望運氣不好，人品好做好準備也是會有倒楣的時候，但個人只能控制自我要求，想成為什麼境界的人就做什麼事 . . How to Fail at Almost Everything and Still Win Big . I knew Scott Adams because of his cartoons. This book shares many practical “principles” that impact me a lot, eg: . Goals are for losers; systems are for winners [the world is so random, it is hard to set the goal to become millionaire next year but we can do what millionaire will do] | Passion is useless [sad but true, no one is interested in how passionate Steve Jobs is before his success] | A combination of mediocre skills can make you surprisingly valuable [few top 10% skills maybe better than a single top 1%] | . . Atomic Habits . I found this after I read “systems are for winners” from Scott Adams’s book. If I need to summarize the whole book, below are my takes: . Find the habits you want to build and decompose until it is almost impossible to fail eg: fitness: instead of going to Gym room 4 times a week, just do at least 3 push up per day | eg: reading: instead of reading certain pages, just read at least one paragraph per day | eg: programming: instead of doing 10 Leetcode during weekend, just do the daily challenge | . | After you identify the habits, do them for 21+ days . | Don’t cultivate too many at a time | . Video: DO NOT SPLIT 不割席 . As Hong Konger, it doesn’t make sense if I tell you I have no views on what happened over the last few years :( It is sad that the conflicts will probably last for decades b/w the people and you can do nth about that. . Over these 2 years, I always have these questions in my mind: . The conflict could be resolved easily from the beginning, how is it possible that the government picked the worst possible options and escalated the situation to irreversible? . | At what cost people are willing to pay for what they disagree on? It is naive to deny/justify the violence that happened. The issue is after you have tried all the possible peaceful means and got no response, it is encouraging people to go to extremes, especially if they are not the minority. People always talk about the events since 2019 July but they don’t discuss why the government gave no response after a peaceful protest with 2 millions+ [aka around 1/3 of the city population]. . | In my view, this is removing the brake from the movement because the peaceful supporters cannot propose another way but sit back. When did the stupid government ask why do you not condemn the violence? The answer is simple: it was you who told us peaceful marches did not work, it was you who removed the brake when we asked you not to. . | Who should be responsible? Well……it is like……someone turns on the lighter and burns the house, will you blame why the house is flammable when everyone asks you not to? It is sad that hundreds if not thousands of protestors may be in jail at last for the disaster that could be avoided from the beginning. . | I don’t hold any particular “political beliefs”, I don’t like the bundle package because the narrative makes us give up our rational thinking. As long as we are solving the problems but not solving the people who raise the problems, any idea should be evaluated to considered and evaluated. . | .",
          "url": "https://g-hung.github.io/blog/books/",
          "relUrl": "/books/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Projects",
          "content": "Project ARK . Feb 2021 . . A automataed data pipeline to scrape &amp; store daily ARK holdings data using GitHub Actions, BigQuery, command line, Python and dbt. Collect the fund weight data to further study the trading strategy and signals . .",
          "url": "https://g-hung.github.io/blog/projects/",
          "relUrl": "/projects/",
          "date": ""
      }
      
  

  
  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://g-hung.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}