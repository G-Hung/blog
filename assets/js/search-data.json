{
  
    
        "post0": {
            "title": "Recent life",
            "content": "Recent life . 2022 Q2 is an interesting period for me, for the first time since COVID, I can escape from constant struggle and mentally self-consuming cycle. I don’t spend an excessive amount of time on interview preparation such as leetcode, knowledge even without the immediate needs, kind of like preparation for preparation. . So why? Because I am lucky and won the H1B lottery this year. I mentioned in the previous article that this is a pure luck game, I attribute 100% of this outcome to luck rather than my own effort compared with other applicants. . But this is important because I can shift from survival mode to alive mode. Similar to when you fall into the water without a life jacket, if you can step on the ground, even if you are still in the water, you are in a much better position to plan and think about things. . So finally I can shift the focus to learn/do something I am interested in, those important but not urgent things . Workout &amp; diet . One night in May, in front of the mirror, I said what was going on with my body. Apparently, my belly fat is quite obvious even after I dress on……. . Although I can blame COVID for this again, after all, COVID doesn’t have an entity that I can submit my claim to, therefore I signed up for a gym room 10 minutes drive from my home. I researched the training and nutrition plans that are suitable for my stage, and I watched a lot of youtube videos to refresh myself on how to press, pull, and squat properly. . But I know I am an easy give-up type, therefore, I need to design a lifestyle system to support it. . So I collected some common reasons for not going workout or following a healthy diet based on my own historical records: . It is soooooo tired after work OR there are some events tonight OR workout after work kills my whole night to do something =&gt; let’s take a rest for a day To address this, instead of workout after work | . I just wake up early and workout before work | I prepare the ready-to-go workout package [bottle, gym glove, deadlift straps, protein bar] | I force myself to sleep early | I turn on the every app limit in iOS after 10pm | I use iPhone notes to plan everything I need to do in the next workout - impacts | I become a morning person | I didn’t miss a single workout for 2 months [I do 3 times per week currently] | . | It is soooooo hard to eat healthy and precise, ordering Ubereat is so convenient! To address this | . I have learned how to read nutrition labels | I signed up for a Costco membership, do bulk purchases every 2 weeks, and prepare my own food thanks to remote work I can prepare the food myself for all the meals | eating using Costco ingredients during weekdays saves a LOT even I bought whatever I want to eat in Costco [healthy foods of course]! | . | I bought a scale with a 0.1-gram accuracy level | I have used an app called MyFitnessPal to track everything I eat - impacts | I save a lot on food and it is quite easy to track once the routine is there | Now I don’t like to eat out not because I am cheap, but because it is difficult to track nutrition | I learn how to use Air fryer and cook well in a short period of time :) | I am accumulating the materials to make a food blog on eating well and delicious, cheap and easy LOL - BTW, I am not a healthy diet extremist, I still eat out with friends and have some cheat meals on weekdays | . | Personal finance . I spent an extensive amount of time reading and thinking about this book Set for Life: Dominate Life, Money, and the American Dream. For my education in the past, I wasn’t exposed to money-related stuff a lot, partly because I was not interested in that [too idealistic at that time], partly because there are no courses/books/materials with a “system” view. Yeah, we know saving is important, and investment is important. At the same time, there are also voices such as there is no point to keep so much cash during high inflation, getting a salary cannot get you rich, owning assets is the king, etc. . Well, these are all right in theory but how can we link them all together, to understand the purpose, strategy, and tradeoff of each action, ideally stage-by-stage implementation &amp; tracking just like a gym workout plan? . From this perspective, I think this is a good book that answers all these questions, I may not agree with every suggestion it provides but I think the framework &amp; the maths make sense and provide a practical pathway to achieve the so-called financial freedom [yeah, I prefer the scientific/engineering way, show me the formula, metrics, steps, and examples, don’t tell me what does it feel when you become rich, tell me how to become rich legally] . In short, all the suggestions can be summarized in one sentence: reduce expense [80/20 rule, don’t be cheap on the little entertainment, target the elepant in the room], increase income [remarks: wage &amp; income are different], invest the difference until it can self-sustain and support your life . book link: https://www.amazon.com/Set-Life-Dominate-American-Dream/dp/0997584718 . Accounting &amp; Negotiation . Another area that I am spending time on is some business-related courses on Coursera. Again, my education didn’t cover these areas a lot. Through my work experience, I have learned more about the different business models but I don’t know much about the financial side. . In the workplace sometimes I heard certain decisions are made because of P&amp;L, something needs to be done because of finance/accounting practices, for management after a certain grade they need to manage their own P&amp;L? What the hell does these mean!? I can deliver my own works well but it seems there is another set of games other than the business model. . So I am spending time to explore that world [and it is quite interesting actually, but I feel like I have more questions on how to fraudulence (or detect fraud :-) ) the financial statements] https://www.coursera.org/learn/financial-accounting . Another course I am working on is negotiation by Yale, I took a game theory class back as an undergraduate and read some books about that but I didn’t think these are very practical. But this course is super practical in terms of providing a unified framework to approach negotiation [not necessarily business negotiation actually, it could be used to explain &amp; predict a lot of real-life behaviors]. In short, always understand the pie and the added values of different options. https://www.coursera.org/learn/negotiation . Distributed system . I am also reading a book called Designing Data-Intensive applications, things make sense and open a whole new world to me, but I don’t feel I can fully understand some distributed system concepts [theory part, those clocks, order, consensus things]. . It is cool that the same author releases his distributed system lecture recordings in Cambridge that exactly address these problems! . Book: https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321 . Youtube list: https://www.youtube.com/playlist?list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB . Conclusion . That’s it, health, personal finance, knowledge, all these are important but not urgent things, they take a long time to take effect but I always prefer long-term greed when the situation allows. .",
            "url": "https://g-hung.github.io/blog/random/2022/07/24/recent-life.html",
            "relUrl": "/random/2022/07/24/recent-life.html",
            "date": " • Jul 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Imagined reality",
            "content": "Imagined reality . Animals, probably just optimize their short-term interest, they probably take actions based on food, safety, and reproduction, things that are concrete, physical, and objective. . It is interesting for humans because we make decisions on something/concepts that may not exist in an objective world. I have read “A brief history of humankind” by Yuval Noah Harari, one of the interesting perspectives is that human is the only creature that lives in both physical and subjective worlds. . Money is the greatest example, money is no more than just a paper or a digit in the app, yet it drives the whole society. Most of us allocate our weekdays to work to earn some money and expect the digits can exchange for something we want, but it is just the imagined reality in our minds! . Decision making . People growing up from different cultures and environments form their own imagined reality, together with the internet, it creates some interesting disagreements, ideologies, or perspectives that are formulated on top of imagined reality. . Some examples I have seen recently: PS: no right or wrong, just whether I think it is a reasonable argument . COVID vaccines . Some people don’t take vaccines because: . They dislike the authority “forcing” people to take it, it violates human freedom and free will | They have the freedom to access the risk to decide on their own | . My view: While it is your right to decide to take or not, I don’t really agree with the vague &amp; potentially subjective concepts such as freedom should be used as an argument, because it implies the good and bad side implicitly. Whether to do something in the physical world should depend on objective evidence. . In this case, how effective are the vaccines against COVID? what are the side effects? what are the consequences to society if we don’t take vaccines? If the argument is we don’t know the side effects, it makes sense to me. But if we are using conspiracy theories or extreme examples or other stories to manipulate human emotion is not. . Herd immunity or clear zero policy in China . Herd immunity: clear zero policy isn’t sustainable Clear zero: we should clear zero at whatever cost because potential casualty is huge . My view: When both sides have reasonable arguments, then let’s just consider the objective evidence . clear zero policy is not sustainable =&gt; True | potential casualty is huge =&gt; maybe True. | . From here we can consider what something we should/we can do, for example, whether the vaccination rate of certain groups isn’t high enough, whether we don’t have enough equipment to support the cases, and whether it is possible to release stage by stage, etc . Driving the discussion to actionable items, something that is concrete is one of the most effective ways to end the concept game, especially when the imagined reality of both sides is not aligned. . Mind templates . Some of my favorite templates in the workplace/daily life: . Don’t deal with abstract concepts, say: give me an example | Don’t use the subjective expression, say: I see xyz, therefore, I interpret it as abc | Challenge the ground, say: you say abc, what makes you have such impressions/thoughts | Or simply ask: why? | .",
            "url": "https://g-hung.github.io/blog/random/2022/04/13/imagined-reality.html",
            "relUrl": "/random/2022/04/13/imagined-reality.html",
            "date": " • Apr 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Real life statistics",
            "content": "Statistics . My bachelor’s degree is in statistics, to me, statistics tries to handle/model/measure random events. To do that, people define random events [usually use poker card/dice as examples] and associated probability distributions, then from there expand to some key measurements such as expected value, variance, etc etc . I think I can handle the problems in homework and exams quite well, but the real lessons of statistics, if we are not doing research, is to apply it in our daily life. Over the last two years during COVID, I counter that multiple times . Example 1: Job searching . Since I graduated during a “historical moment”, the job market is cruel to everyone, especially those who just started. The market successfully turns interview/offer probability to almost zero [side note: when I asked people from the previous/next cohort, how many applications do they send? They said a lot, almost 100 and I laughed.] . But the point is statistics, if you have taken a statistics class, the problem set usually has some questions to calculate the probability of at least one event happening. I know if the probability is not exactly zero, I am likely to succeed in at least one in the end. . However, calculation and reality are different, humans are not rational all the time, especially under uncertainty. I think it is similar to investment, can we be disciplined and make rational decisions all the time? . My 1st lesson is: It is hard, it is not about knowledge or whether we know the “right answer”, it is about how can we manage our mind and emotion . My 2nd lesson is: Because of the first lesson, don’t make important decisions when we are emotional/under scarcity feeling, we will likely make a suboptimal choice. In the job market, don’t take the offer right away just because you want to escape from the shit hole; In investment, don’t tie money with emotion . Example 2: Job searching again . Now you move to the next stage, pass some interviews, have some opportunities closing to the finishing line, one opportunity is your dream job and you start to dream how great it will be! You start to calculate the expected value and it is an outlier! Great! Awesome! Excited! . My 3rd lesson is: Don’t excite too much about something before it becomes reality. No matter how high your expected value is, it is still the expected value, it doesn’t realize yet. It means the scenario that a low probability event is possible to happen. In the job market, don’t think you made it until you made it; In the lottery, sometimes the expected return of buying a lottery is higher than the cost, it doesn’t mean you should all in . Example 3: H1B visa . In case you don’t know, if international students/workers want to work in the US after OPT (Optional Practicum Training allows STEM graduates to work for 3 years and others 1 year), the main way is to hope to win the H1B lottery. Why is it called a lottery? Because it is, USCIS randomly selected a group of lucky people to submit the applications, and the probability to win H1B is dropping [around 20-30% for people with advanced degree] because of increasing applicants and visa abuse. You can do nothing, literally nothing to influence the final result other than doing a master/PhD and ask your employer to apply it for you. Yet, the result may change your life trajectory completely. . My 4th lesson is: Life is random, maybe a random developer in USCIS inputs a random seed that determines the lives of thousands. This may relieve us a little bit? Outcomes are determined by both human and randomness, we can only choose to do our best and bet another side works out . If we work hard and don’t get what we want, don’t forget randomness, it is just unlucky sometimes, don’t give up If we work hard and get what we want, don’t forget randomness, it is just lucky sometimes, don’t feel smug .",
            "url": "https://g-hung.github.io/blog/engineering/2022/04/01/real-life-statistics.html",
            "relUrl": "/engineering/2022/04/01/real-life-statistics.html",
            "date": " • Apr 1, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Annoying tech debt",
            "content": "Tech debt . Tech debt is similar to credit cards, if you use it wisely, you can leverage the same resource [fixed engineering resource] to achieve the bigger results in the short term. But similar to credit card, you need to have a strategy to pay that back. . In the workplace, the tech debt is shared by the team . For credit cards, it is your financial issue. Interestingly, in the tech workplace, people who make the debt are usually NOT the people who pay for the debt! It means your tech debt is shared by the team, if the team is great and disciplined [only make the debt when it is necessary], then tech debt is fine as long as you repay that on time. But the most annoying part is when people are not disciplined and keep making the debt, and they also don’t plan to pay that back. Instead, they will just quit and leave the debt to others right before things are out of control. . In the end, someone gets the credits and leaves the whole &amp; future team to pay that back, which I think isn’t ethical. . Solutions . If it is a prototype, dirty &amp; quick is fine, as long as it is just a demo. . If it is for long-term use, involves long-lasting pipelines &amp; complex logic, then design and code review are required to maintain things above a certain standard. . It requires discipline, it requires thinking, it is not the most comfortable approach. But for the healthy growth of project/product, it is necessary. . At the very least, given a reasonable timeline and resources, the codebase should be improved with every new PR. . If you don’t have such fortunate, then please, at the very least leave a BIG TODO flag with reasons and explanations. Also, organize the code in a way that you or other people can rewrite easily in the future [functions, no hardcodes, reasonable naming, comments next to non-trivial things, write one or two unit tests for the happy flow]. These things can have 10x+ ROI easily in terms of time. .",
            "url": "https://g-hung.github.io/blog/engineering/2022/03/18/tech-debt.html",
            "relUrl": "/engineering/2022/03/18/tech-debt.html",
            "date": " • Mar 18, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Python for advanced beginner",
            "content": "Medium link . This article I share some techniques that I think are useful yet not many people use them extensively in DS world. .",
            "url": "https://g-hung.github.io/blog/engineering/2022/01/20/python-for-advanced-beginner.html",
            "relUrl": "/engineering/2022/01/20/python-for-advanced-beginner.html",
            "date": " • Jan 20, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "The weird part of data science",
            "content": "The weird part of data science . Over the years, I have had different thoughts about the data science industry, just try to write different phases down and organize my thoughts, may not have a very clear message at the end. . At the beginning…… . When I first started to work in the so-called Data Science field, I thought it is cool that I can finally become an ultimate idea man, think about the problem, apply the math/modeling, then success &amp; $ will come. At that time I thought modeling/math is the most important, and I should study even harder. . Then I found that it was not the case, no one at work is interested in reading my math [damn!] or using the complex solution if not needed, actually myself as of now, also hate the “unnecessarily” [&lt;- this is a keyword, don’t overlook] complex solutions, yeah I know they sound cool on the resume. . Business is the most important!? . My mind shifted and thought business is the most important, I tried to involve myself a little bit more in business and tried to control/plan the projects to gain more “influences”. . Turned out I found there are some real insights from business/domain experts, but not many people think about what they are doing, even if you follow the route in that area it will not bring real impacts, but become a better player when climbing the corporate ladder. . Model becomes cool again . Interestingly at that moment, deep learning started to come out and presented very beautiful pictures that seems to have the capabilities to bring the revolution, I was interested in that and tried to think of different possibilities. . Then I joined a startup and found that the embarrassing part of data science is to ask my engineer friends to help, from collecting data, to creating pipelines to do something on top of that, implementation/engineering is the most important! . Engineering is the king . With that in mind, I came to the state to do my master’s in data science, after the previous learnings, I deliberately picked a practicum company that appreciates good engineering practices. That was the good old time, I learned tons within a short amount of time, then I started to work in the US…… . Deliver first . Different companies are different but the very same core is to ask you to deliver first and then be concerned about tech debt. While it may be OK in software engineering, data science works make situations interesting because of their nature and they are the things I keep on thinking . Complexity of DS/ML projects is higher than software of a similar scale . When I think about software, I always think what I am doing is managing the complexity, the demand will change but at a specific time point, it may be fixed for a while, which offers the possibility to introduce more tools and abstractions to manage the complexities. . But data science has two categories of complexities at least, software and data. This becomes very annoying because other than those we experienced in the software, we also need to deal with uncertain data. Whenever I see a 100+ lines query, I already start to feel nervous. Although the query will follow our instructions and do what we asked it to do, when it executes, who knows whether some weird things are happening in the data itself, maybe there are some ingestion problems? . This may not sound a big deal [well we can fix that] but it is illusion because 1. the price to fix them could be really big [maybe you need to redo everything] and 2. when you spot one issue, it usually implies many more. One of my favorite quotes I want to share with more ppl is Amateurs talk about strategy and tactics. Professionals talk about logistics and sustainability in warfare. To apply that to DS/ML projects, amateurs talk about the fancy algorithm, and SOTA, professionals talk about data, business, infrastructure, engineering practice, and sustainability. . So it seems very clear that we should do things right and have the software practices at least similar to software engineering level [good one for sure, eg: well-covered tests, automation tools, organized code; not spaghetti code] . Weird part . But in reality, why do people usually have impressions that DS/ML projects require less engineering skills? I have a few hypotheses about this . Job role: people always confuse the job duties of data scientists, it is a mix of engineer, analyst, product manager, and operations. But in reality, the spectrum is very wide, a significant portion of people are working on analytics [things like experimental design, product analytics, etc], instead of developing the algorithms. It doesn’t mean those are less important, as I mentioned above, it is hard to find a good DS in analytics with good business insights and guide the discussions. But they are very different roles and require different skills even people may have the same title . | People: DS/ML fields are relatively new with fewer hard requirements in the past, it opens up a lot of opportunities for people who are outside of the fields to join. When they climb up in the ecosystem, they start to decide the industry standard, after all, everyone has some path dependencies. . | Project: There are not many high impacted DS/ML projects [I mean those that can become company cashcow], many projects are just good to have, it makes no big difference if you do that at a world-class level or with manual dirty scripts. . | Therefore, it becomes tricky in reality, a field that requires lots of investments and infrastructure support to do well, is using dirty rush methods most of the time. The root issue seemingly is the ROI, if the project doesn’t have a high ROI, why should we invest time and effort to improve that? . The last point brings my mind back to the loop again, business[not office politics] becomes the most important again, how to identify high ROI projects or companies with such potential? That’s one of the reasons I become tired of chasing the SOTA models/reading papers in the recent period. Don’t ask what the DS/ML algorithms can solve, find what problems are worth solving and enough to make my paycheck or fortune, ideally a big one :D .",
            "url": "https://g-hung.github.io/blog/career/2021/11/23/the-weird-part-of-DS.html",
            "relUrl": "/career/2021/11/23/the-weird-part-of-DS.html",
            "date": " • Nov 23, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Start to appreciate 'boring' parts in life",
            "content": "Start to appreciate ‘boring’ parts of life . For the last two years [since COVID], I have started to appreciate the “boring” parts in life, something I used to think are old school and not cool. . Work . In work, I have started to vote for a simple yet not naive approach, “simple” means easy to deliver solid things and no gotcha; “yet not naive” means there are enough spaces for the extension, just not now. In order to keep lazy, I have started to plan, draw and write down some key things if possible before I get started, I have started to execute slower before the math works out . To the younger me, this would sound impossible, I was very proud of myself with a good memory [even without notes] and the most fanciest ways to accomplish something without steps. I remember back to my secondary school time, I was quite good at math and always doing all the steps and calculations in my mind, the papers only contained a few unreadable steps and the final answers. If I needed to work with the younger me on some projects now, I would say “fk you, don’t skip any steps, I have no interest in reading your mind, I don’t want to guess”! . Daily life . In daily life, I have started to work out regularly, eat breakfast and lately learn something daily. These are quite surprising changes to me, I recall I was one of the weakest [in terms of physical strength] people in secondary school and now I push the barbell and lift the dumbbell a few times per week in my room. I make my [the very same] breakfast after I wake up whereas I only had breakfast during the weekend because I need to have breakfast with my family [HK Dimsum!]. I now open the site to learn something after dinner, whereas I found some mobile games to spend my nights. . Social life . In social life, I kept on thinking about the cool events to go with my friends, but now I really enjoy less-is-more ._. Just coming out, having a coffee/dinner and chatting are enough to make me happy. . . Not sure whether it means I am “older” now or COVID transforms me into this way, but I quite enjoy the current simple style if I could meet my friends even easier. The feeling of appreciating the “boring” parts recalls me a song 苦瓜 by Eason Chan, sorry for those who can’t read chinese .",
            "url": "https://g-hung.github.io/blog/career/2021/11/13/start-to-appreciate-boring-parts.html",
            "relUrl": "/career/2021/11/13/start-to-appreciate-boring-parts.html",
            "date": " • Nov 13, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "How to choose jobs in the DS world",
            "content": "How to choose jobs in the DS world? . This is what I have struggled in my mind over the years, what is a good DS job……. To solve this problem, I have created the checklist/questions which I hope the previous me could read before making the career decision. I won’t talk about compensation / tech details / interviews, that’s another story . You are not always in the position to choose (such as finding jobs during COVID-19) but you should seriously evaluate your options if you can . Job nature . There are thousands of jobs sharing the same title, eg: data scientist, data engineer, ml engineer. But they could be totally different from company to company, be aware! . The first thing I will look into is the skill requirements to identify the job nature . If it is analytics, expect tons of SQL, dashboards, presentations, product analytics, experimental designs. You probably need to enjoy talking to people, finding insights, guiding the business, which means you need to be a domain expert in that business. In short, I think it is more like a business/PM/consultant type of roles, but from data perspective . If it is engineering, be alert if the job responsibilities are vague, don’t make assumptions, let me repeat: don’t make assumptions! For example, the people who share the data engineer title may do completely different things. Some are developing ETL pipelines; some are working on instrumentation; some are building the new data / ML infrastructure. You should think clearly whether that fits your career plan! . Also, another common “trap” is internal transfer, you want to get into the company first and switch to the roles you want, while I don’t deny the possibility, don’t be over-optimistic in your calculation, hope is not a strategy . If it is modelling, I will consider two things, one is the value of the models, another is the team maturity. For example, developing a model for Dogecoin price prediction sounds great but the outcome is probably not promising. Team maturity is another consideration, be aware if the team is too green or even worse, you are the first member. They will sell like every startup does: you will have enough space to innovate. There are successful stories but think about survival bias. If you are super capable/team lead level, it may be worth trying; if not, then……… . Business/product model . Personally I think this is fundamental factor to determine your scope and potential achievements in the organisation, and financial uplift, I will ask myself the following questions: . How do you justify your (or your team) pay check in that business/product? How large is the potential uplift? This question requires you to think about how the company makes for living, and what area you can contribute. . For example, in the traditional industries such as merchandising, they probably don’t need advanced ML yet but they need to digitalise their business first. So even if you are a genius in ML, there are no such demands, and your deliverables will likely be ppt or fitting some models on some data in a Jupyter notebook. You will likely try to establish some KPIs or standardise the business workflow and get rejections from business experts. . The trap here is these companies usually say they are willing to change/digitalise themselves, but that usually won’t happen because that doesn’t fit their previous success path, your role is in fact threatening the interests of the original core team if you can’t show values quickly. Don’t recommend unless you are confident that you can be an asset rather than a liability. . | What is the “resource complexity” to scale? O(1)? O(n)? O(n**k)? Software industry is different from others because it is much easier to scale, or in economics terms, marginal cost of software approaches zero. But not every software has such a property, especially B2B solutions. In recent years, there are tons of “AI companies” developing their solutions in different verticals and plan to sell them. . The happy flow is they will develop one algorithm/system and run in different customer systems, since the companies in the vertial are mostly giant companies [eg: banking, telecom, retailers, airlines], they can afford a big bill if the solution is nice! But the unideal parts are: selling solutions to business usually require custom integration, that hurts the scalability and increases the marginal cost, A LOT, especially if you are using AI [those deep learning things]. Deep learning models are still blackbox, there are too many edge cases if the business requires more than the simple &amp; straightforward use cases. . These companies can definitely make money if the margin is big but nature will become more like a service or integration company, aka human intensive. So from an employee perspective, it implies you will need to do one project after another, hence operational tasks / projects may take up significant amounts of your time and you have less time for R&amp;D / innovative things if those are what you want. . To compare the difference, imagine SaaS companies like Confluence [The company that makes Jira], the marginal cost to serve one more user is close to zero and even if they don’t develop any feature for a whole quarter, it won’t affect their growth in the short run. These companies hence usually have more time &amp; resources to experiment the new things because the business outputs could be detached from employee’s work hours and client’s business logic . | business/product model also affects the operations, A LOT! We are doing DS so where is the data? SaaS / B2C products don’t feel such pains because users will likely use their developed applications, and engineers can implement tracking or log the events in servers to collect the data [there are also some headaches but everything is under your control, at least before Apple’s App Tracking Transparency]. . But imagine if your clients are government, banks, airlines, retailers, and you have a ML solution for parts of their processes. Then you need to ask them for the data, you need to understand their schema &amp; business logic, handling the dirty data, and come up with tons of workarounds to run your models. . That isn’t fun because your time is tied to the outcomes &amp; your work is constrained by others. Never imagine those companies will change their process because of your product, never assume their digitalisation level will boost suddenly to meet modern software requirements. You will probably be woken by PagerDuty and live with tech debts until the end of your tenure there instead . | Nice article from a16z to discuss AI companies . Team . Your supervisor and team contribute a huge chunk of your job satisfaction, they can determine whether it is an amazing or nightmare experience. But this part is quite general for every job, some key signals I recommend you to look for are: . Growth mindset: Do they adapt to a growth mindset? Do they encourage people to grow but not box them like a robot? Do they micromanage? How do they make the decisions? Are they humble? Get these information during interviews . | Atmosphere: Are they a happy team? Are they humour？Are they willing to share the insights and knowledges? This will signal whether people are psychologically safe, if the answer is no, you better understand why and whether you can accept that. Mental health and growth are even more important than your compensation after a certain threshold. A mismatched atmosphere will make you become a philosopher, stay away from the toxic culture, it makes you negative, short-term focus, and anxious! . | Experience: Are the team experienced? If not, you may have a hard time getting up to speed. BTW, companies usually frame this shortcoming as challenge / opportunity, calculate the odds yourself . | Company . Do due diligence carefully Go to Glassdoor/Blind, check the negative reviews because they are mostly true. My theory is 5 star reviews could be neglected because that fits the company interest but you should read and evaluate every word in 1 star reviews . | Check the background of management Are they experienced? Do they know what they are doing? Do you have networks that work with/for them? Give them a call! These are important because inevitably there are up and down in business, these factors will take effect at that critical moment . | Check company retention Are there many people leaving recently? That maybe a signal . | Check funding status if you are applying for a startup . | Trust your guts idk, but whenever I feel something weird / doesn’t make sense, they are usually true unfortunately. Be rational, don’t be over optimistic. Remember they are trying to sell you the company, which means they are like a sales team and show only beautiful pictures in your mind. Be rational! . | Conclusions . Unless you are super lucky and get your dream job, your decision should be tradeoff b/w various factors we discussed above . Some people enjoy coding while some people enjoy talking to people | Some people enjoy quiet culture while some people enjoy happy &amp; open culture | Some people prefer stability while some people prefer growth (risk) | Some people prefer B2B because of easier monetization while some people prefer B2C because of possibility of rapid scaling | . As long as you have evaluated the options carefully and understood the potential good and bad, the rest is your choice! . Recommended reading: . reading note of Effective Engineer .",
            "url": "https://g-hung.github.io/blog/career/2021/07/07/how-to-choose-ds-job.html",
            "relUrl": "/career/2021/07/07/how-to-choose-ds-job.html",
            "date": " • Jul 7, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Revisit some basic theorems in probability",
            "content": "For a long time, I confused their relationship . When I had my statistics class, I always confused these three in my mind: . Chebyshev’s inequality [I don’t know how to pronounce :- , usually just call it CS inequality]: met it few times in my life but didn’t leave me a big impression. . Law of large number &amp; Central Limit Theorem: always use them interchangeably, but deep in my heart I remember they are different . Recently in a conversation with my friend, we talked about some hypothesis testing things [t-test], we discussed the assumptions of t-test like this: . A: yeah, you see, even the distribution shapes of these two population are different By central limit theorem, the means will follow normal distribution regardless of the shape We can still use it even the distributions are not normal B: Sure, law of large number right? As we have more samples they will converage and hence t-test is valid even the distributions are not normal A: oooo seemingly right..... . Obviously I am A, but I was hestiate for few seconds because I forgot what is law of large number and how is it related to CLT! I remember they have some subtle differences. Therefore, I revisit the materials in probability course recently to answer the difference myself, and what the hell is Chebyshev’s inequality . Chebyshev’s inequality . Recall the basic numbers for distribution, expected value and variance, one describes the central tendency, another describes the spreadness of the distribution . If the variance is small, the distribution is not that widely spread, it is less likely to get the outcome far away from the mean . In mathematical terms, it is less likely to see abs(X - u) &gt;= certain number, hence Pr[ abs(X - u) &gt;= certain number ] should be small. . When that certain number becomes even bigger, that probability should become even smaller [less likely]. . Chebyshev’s inequality basically states this relationship using expected value and variance: . Pr[ abs(X - E(X)) &gt;= a ] &lt;= Var(X) / a^2 for a &gt; 0 | . The importance of this equation is that we can calculate the sample size after we specify what level of confidence and bound we want . It is also beautiful! Link expected value and variance together in one inequality regardless of distributions . Law of large number . Recall the fact that variance will decrease when n increases and take a look on Chebyshev’s inequality again! . Pr( abs(X - u) &gt;= a) &lt;= Var(X) / a^2 for a &gt; 0 | Var(X) -&gt; 0 as n increases | . Therefore, Pr[ abs(X - E(X)) &gt;= a ] -&gt; 0 for a &gt; 0 Therefore, Pr[ abs(mean(X) - E(X) &gt;= a ] -&gt; 0 . Law of large number basically tells us the sample average will converge to expected value when n increase, basis of statistics and simulation . Central Limit Theorem . CLT tells us average of n observations of ANY r.v will follow normal, ALL distributions, no matter how complex it is as long as mean and variance are finite . Conclusion . Now rethink what each of them is doing . CS inequality tells us that the difference b/w sample and expected value is bounded . LLN tells us the difference b/w sample mean and expected value is not only bounded, but converages to zero when n increases . CLT tells us the sample mean not only converages, but the distribution of sample mean converages to normal distribution when n increases regardless of underlying distributions . CLT makes the biggest claim and hence is also the most famous, valuable and backbone of statistics . Recall the t-test conversation . A: yeah, you see, even the distribution shapes of these two population are different By central limit theorem, the means will follow normal distribution regardless of the shape We can still use it even the distributions are not normal B: Sure, law of large number right? As we have more samples they will converage and hence t-test is valid even the distributions are not normal ^^^This statement is not correct^^^ # sample mean does converge to expected value # but nothing to do with converging to normal distribution, that&#39;s the magic of CLT A: oooo seemingly right..... . Disclaimer . Some of them are not precise &amp; complete description, eg you may rmb weak/strong law of large number, reading a mathematical statistics book maybe more useful. .",
            "url": "https://g-hung.github.io/blog/statistics/2021/05/31/revisit-basic-theorem-in-probability.html",
            "relUrl": "/statistics/2021/05/31/revisit-basic-theorem-in-probability.html",
            "date": " • May 31, 2021"
        }
        
    
  
    
        ,"post9": {
            "title": "From cURL to Automated Workflow",
            "content": "Medium link . This is an old article I posted in Medium, I may just provide the link without reproducing it here! . When we work in DS field, the most important thing is data. But we don’t want to handle the things manually because it means mistakes and demands people to work like a machine. . This article discusses how to make a pipeline to hold data from ARK fund, load them to Google BigQuery, checking the data quality using dbt, the whole workflow is managed and automated by GitHub Actions! .",
            "url": "https://g-hung.github.io/blog/engineering/workflow/2021/02/23/from-curl-to-workflow.html",
            "relUrl": "/engineering/workflow/2021/02/23/from-curl-to-workflow.html",
            "date": " • Feb 23, 2021"
        }
        
    
  
    
        ,"post10": {
            "title": "From Scripts To Prediction API",
            "content": "Medium link . This is an old article I posted in Medium, I may just provide the link without reproducing it here! . After we have the ML/DS scripts, how can others make use of the predictions? Definitely we don’t want to run the scripts ourselves and send it over the email / message. A common approach is to develop the API . This article continues from the last medium post and discusses how to build the prediction API and the importance of unit testing .",
            "url": "https://g-hung.github.io/blog/engineering/workflow/2020/08/16/from-scripts-to-predictionapi.html",
            "relUrl": "/engineering/workflow/2020/08/16/from-scripts-to-predictionapi.html",
            "date": " • Aug 16, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "From Jupyter Notebook To Scripts",
            "content": "Medium link . This is an old article I posted in Medium, I may just provide the link without reproducing it here! . This article records part of my learnings from my practicum at Manifold AI! I remember I was a big fan of Jupyter Notebook and wanted to use it for everything! . My first time to use Jupyter Notebook in work [not exploration / homework] was to try Databricks to handle some data processing works. I was amazed by the notebook style because I am not from CS background and I would love to see what is happening in every step! . But I found that those colleagues with CS background don’t prefer this way, I had no clues why. Slowly, I started to feel inconvenient too when the processing logics are more and more complex…….Well, things are still working……. . Until I worked in Manifold AI and needed to write the whole workflow, I finally found that it is much much easier &amp; more flexible to run the code by a list of commands instead of a long Notebook…… . Plus, I have the habit to write unit tests whenever possible after I experienced how painful it is when you try to refactor any non-trival codebase. . During the painful job searching period in 2020 [wtf graduated during COVID-19], I didn’t have many things to do so I summarized and wrote this up. .",
            "url": "https://g-hung.github.io/blog/engineering/workflow/2020/08/06/from-jupyter-notebook-to-scripts.html",
            "relUrl": "/engineering/workflow/2020/08/06/from-jupyter-notebook-to-scripts.html",
            "date": " • Aug 6, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Start from Hong Kong: 199X - 2019 . Yoooo! I am Geoffrey from Hong Kong, currently in California! I graduated with my BSc in Statistics from CUHK, the place that I am proud of &lt;3. . I worked in various companies in Hong Kong! I am glad to meet a lot of great leaders &amp; colleagues and learn from them. . . Move to SF Bay Area: 2019 - Now . In 2019, I moved to the Bay Area to attend the University of San Francisco’s MSDS. I enjoy the environment [maybe not the downtown :( ] and all the great people I have met in the Bay Area! Sadly, I cannot experience the “normal” social life because of COVID :( . from time to time, I have some random walks around the Bay side, walk, sit and think . MSDS and Manifold: 2019 - 2020 . I am fortunate enough to do my practium at Manifold AI and work on some open-ended research using deep learning with world class tech-leaders and hardcore engineers. This experience also changes my understandings in ML/DS and engineering in general! . . Interests . My interests are DS and engineering in general, I am particularly interested in ML/DS workflow. I honor the Three Virtues of a programmer and love to bring those virtues to ML/DS world! . Outside work and study, I have started to pick up cooking skills since 2020 [because of COVID]. I have also spent some times on Brawl Stars [hit me by #C2QRU8QQ]. Reading is also a big component of my life, I enjoy history and psychology most! I will probably include some books that impact me the most in a section of this site . For this site . I don’t think I will take aggressive approach [aka job searching] for this blog. Afterall I see there are so many blogs without updates for years after the authors found the job LOL I don’t want to be one of them and hope to sustain this blog longer. I will probably treat this as my private space and library to keep track of my thoughts and learnings. . Depending on materials, maybe I will use Chinese 中文 some times .",
          "url": "https://g-hung.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Read/Watch/Learn",
          "content": "Write good code? or write poor code with endless fix? . This is a good question, for me, I try to prefer the first option if possible, but my final answer is it depends . The story in the link is a conversation in ancient Chinese story [魏文侯问扁鹊] b/w a king and the best doctor at that time. One day, the king asked the doctor: among your brothers, who is the best doctor? The doctor replied: My oldest brother is the best, followed by the second oldest, and I am the worst. . The king was confused, isn’t you the best one? The doctor said “My oldest brother can notice &amp; fix the problems perfectly BEFORE it becomes a problem, the patients think he does nothing and only our family know he is the best. My second oldest brother can notice &amp; fix the problems WHEN it first appears, the patients think he can only fix the small cases. I can only notice the problems AFTER they become serious, the patients are impressed by my fancy treatments and risky operations, therefore, everyone knows me” . Which one do you prefer :-)? . . Resources: Made with ML . This material is super awesome! Contains all the things I wish to learn connecting ML and engineering! Other than concepts, the example codes are great, no BS, I can just reference, copy, use them right away and it WORKS! . . 机器学习：软件工程方法与实现 . The direct translation is “Machine Learning: software engineering and implementation”. Surprisingly good and practical book that introduces the ML work in reality [including the software engineering side with main focus on non-deep learning areas] and offers the high level picture of different aspects in reality, strongly recommend if you can read Chinese . . Designing Data-Intensive Applications . Maybe one of the best tech books in recent years, must read for serious players in data science / ML engineering, period . . Sapiens: A Brief History of Humankind . I have met many people said they have read this, maybe it is too famous lol I have read it and finished the Coursera course from the same author. . The single view that impacts me most is: humans are living in both subjective and objective world. In fact, money, nation, values etc are all constructed by our minds. They are meaningless if no one believe that . . Resources: Sebastian Raschka . In short, this is the first place I will go if I need to review the topics about ML/DL. I particularly enjoy the clear &amp; easy-to-follow logic. Plus, there are many code examples! . . Resources: Full Stack Deep Learning . Cover almost everything I want to learn about ML workflow, strongly recommend if you need to worry engineering part of the ML as well . . Coursera: 史記 . 「從歷史來看，決定人生成敗的不過就是兩樣東西，第一是運氣，第二是自我要求。什麼是運氣？往大的方面來說，生在什麼時代是運氣，生在什麼國家是運氣，生在什麼家庭也是運氣。往小的說，出門左轉或右轉，接不接一個電話人生可能就不一樣，運氣對每個人就是這麼重要。但是運氣不可測也不能控制，我們所能控制的只有自我要求，如果我們真心想成為什麼樣的人，是真心不是發夢想想，就必須不斷奮鬥努力讓自己具有足夠條件，等待偶然的機會」 . 這段課文感受良多，沒有人會希望運氣不好，人品好做好準備也是會有倒楣的時候，但個人只能控制自我要求，想成為什麼境界的人就做什麼事 . . How to Fail at Almost Everything and Still Win Big . I knew Scott Adams because of his cartoons. This book shares many practical “principles” that impact me a lot, eg: . Goals are for losers; systems are for winners [the world is so random, it is hard to set the goal to become millionaire next year but we can do what millionaire will do] | Passion is useless [sad but true, no one is interested in how passionate Steve Jobs is before his success] | A combination of mediocre skills can make you surprisingly valuable [few top 10% skills maybe better than a single top 1%] | . . Atomic Habits . I found this after I read “systems are for winners” from Scott Adams’s book. If I need to summarize the whole book, below are my takes: . Find the habits you want to build and decompose until it is almost impossible to fail eg: fitness: instead of going to Gym room 4 times a week, just do at least 3 push up per day | eg: reading: instead of reading certain pages, just read at least one paragraph per day | eg: programming: instead of doing 10 Leetcode during weekend, just do the daily challenge | . | After you identify the habits, do them for 21+ days . | Don’t cultivate too many at a time | . Video: DO NOT SPLIT 不割席 . As Hong Konger, it doesn’t make sense if I tell you I have no views on what happened over the last few years :( It is sad that the conflicts will probably last for decades b/w the people and you can do nth about that. . Over these 2 years, I always have these questions in my mind: . The conflict could be resolved easily from the beginning, how is it possible that the government picked the worst possible options and escalated the situation to irreversible? . | At what cost people are willing to pay for what they disagree on? It is naive to deny/justify the violence that happened. The issue is after you have tried all the possible peaceful means and got no response, it is encouraging people to go to extremes, especially if they are not the minority. People always talk about the events since 2019 July but they don’t discuss why the government gave no response after a peaceful protest with 2 millions+ [aka around 1/3 of the city population]. . | In my view, this is removing the brake from the movement because the peaceful supporters cannot propose another way but sit back. When did the stupid government ask why do you not condemn the violence? The answer is simple: it was you who told us peaceful marches did not work, it was you who removed the brake when we asked you not to. . | Who should be responsible? Well……it is like……someone turns on the lighter and burns the house, will you blame why the house is flammable when everyone asks you not to? It is sad that hundreds if not thousands of protestors may be in jail at last for the disaster that could be avoided from the beginning. . | I don’t hold any particular “political beliefs”, I don’t like the bundle package because the narrative makes us give up our rational thinking. As long as we are solving the problems but not solving the people who raise the problems, any idea should be evaluated to considered and evaluated. . | .",
          "url": "https://g-hung.github.io/blog/books/",
          "relUrl": "/books/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Projects",
          "content": "Project ARK . Feb 2021 . . A automataed data pipeline to scrape &amp; store daily ARK holdings data using GitHub Actions, BigQuery, command line, Python and dbt. Collect the fund weight data to further study the trading strategy and signals . .",
          "url": "https://g-hung.github.io/blog/projects/",
          "relUrl": "/projects/",
          "date": ""
      }
      
  

  
  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://g-hung.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}